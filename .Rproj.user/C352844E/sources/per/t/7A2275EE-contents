#----------------------------------------------------------
# WGCNA Analysis of Genes
# Created: 14 October 2021
#----------------------------------------------------------

#----------------------------------------------------------
# Environment
#----------------------------------------------------------

rm(list=ls())

library(WGCNA)
library(tidyverse)
library(RColorBrewer)
library(biomaRt)
library(clusterProfile)
library(ReactomePA)
library(org.Hs.eg.db)

options(stringsAsFactors = FALSE)

ggplot_theme <- theme_bw(base_size=18) +
  theme(
    panel.border=element_blank(),
    panel.grid=element_blank(),
    axis.line.x.bottom=element_line(color="black", size=0.25),
    axis.line.y.left=element_line(color="black", size=0.25),
    legend.position="bottom",
    strip.background=element_rect(fill="#EEEEEE", color="white", size=0.25)
  )

#----------------------------------------------------------
# Load Data
#----------------------------------------------------------

gene.exp <- read.table("04_Expression/data/gene_expression/Logcpm_864_20417_HLA.txt")
gene.info <- read.table("04_Expression/data/gene_expression/Gene_info_864_20416.txt")
sample.info <- read.table("04_Expression/data/gene_expression/Sample_info_864.txt")
sample.key <- read.table("04_Expression/data/gene_expression/Sample_key.txt", header=T)

gene.exp <- as.data.frame(t(gene.exp))

#----------------------------------------------------------
# WGCNA Checks
#----------------------------------------------------------

# Identifies excessive missing values and outliers
# Generally more important for microarray data
gsg <- goodSamplesGenes(gene.exp)
gsg$allOK

#----------------------------------------------------------
# Soft Threshold
#----------------------------------------------------------

# Identify the soft threshold power that will be used to generate the network

if (!file.exists("04_Expression/data/gene_expression_generated/TOM.matrix.RDS")) {
  
  powers = seq(1, 20, by=1)
  
  soft.thresholds = pickSoftThreshold(gene.exp, powerVector=powers, networkType="unsigned", corFnc=bicor)
  
  soft.threshold = soft.thresholds$powerEstimate
}

#----------------------------------------------------------
# Adjacency and TOM Network
#----------------------------------------------------------

if (!file.exists("04_Expression/data/gene_expression_generated/TOM.matrix.RDS")) {
  
  adjacency.matrix = adjacency(gene.exp, type="unsigned", corFnc=bicor, corOptions=list(use="pairwise.complete.obs", pearsonFallback="none"), power=soft.threshold)
  
  TOM.matrix = TOMsimilarity(adjacency.matrix)
  
  saveRDS(TOM.matrix, file="04_Expression/data/gene_expression_generated/TOM.matrix.RDS")

} else {
  
  TOM.matrix <- readRDS("04_Expression/data/gene_expression_generated/TOM.matrix.RDS")
}

TOM.dist = 1 - TOM.matrix
rm(TOM.matrix)

#----------------------------------------------------------
# Clustering TOM Matrix
#----------------------------------------------------------

dendrogram = hclust(as.dist(TOM.dist), method="average")

dynamic.mods = cutreeDynamic(
  dendro=dendrogram, distM=TOM.dist, pamRespectsDendro=FALSE,
  minClusterSize = 10
)
rm(TOM.dist)

#----------------------------------------------------------
# Distribution of Co-Expression Module Sizes
#----------------------------------------------------------

plot.data <- as.data.frame(table(dynamic.mods)) %>%
  dplyr::select(Module=1, Frequency=Freq) %>%
  dplyr::filter(Module != 0)

ggplot(plot.data) +
  geom_col(aes(x=Module, y=Frequency), width=1) +
  xlab("Module") + ylab("Number of Genes") +
  ggplot_theme +
  theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())

#----------------------------------------------------------
# Save Gene Expression Modules
#----------------------------------------------------------

### Module Assignment

gene.list <- colnames(gene.exp)

mod.assignment <- dynamic.mods
mod.labels <- paste0("Module_", mod.assignment)
mod.labels[mod.labels == "Module_0"] <- "Unassigned"

modules <- data.frame(
  Gene=gene.list,
  Module=mod.labels
) %>%
  dplyr::arrange(Module, Gene)

write.csv(modules, "04_Expression/data/gene_expression_generated/modules.csv", row.names=F)

### Eigengenes

eigengenes.result <- moduleEigengenes(gene.exp[mod.labels != "Unassigned"], colors=mod.labels[mod.labels != "Unassigned"])
eigengene.order <- order(as.numeric(sapply(strsplit(colnames(eigengenes.result$eigengenes), "_"), function(x) x[2])))

eigengenes <- eigengenes.result$eigengenes
colnames(eigengenes) <- sapply(strsplit(colnames(eigengenes), "_"), function(x) paste0("ME_", x[2]))
eigengenes <- eigengenes[,eigengene.order]

rownames(eigengenes) <- rownames(gene.exp)

write.csv(eigengenes, "04_Expression/data/gene_expression_generated/eigengenes.csv")

variance.explained <- data.frame(
  Module=colnames(eigengenes),
  Var.Explained=t(eigengenes.result$varExplained[eigengene.order])[,1]
)

write.csv(variance.explained, "04_Expression/data/gene_expression_generated/variance.explained.csv", row.names=F)

#----------------------------------------------------------
# GO Enrichment
#----------------------------------------------------------

ego <- enrichGO(
  gene=
                universe      = names(geneList),
                OrgDb         = org.Hs.eg.db,
                ont           = "CC",
                pAdjustMethod = "BH",
                pvalueCutoff  = 0.01,
                qvalueCutoff  = 0.05,
                readable      = TRUE)
